import os
import logging
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# Thi·∫øt l·∫≠p logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# L·ªánh /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ LBX Bot ho·∫°t ƒë·ªông! D√πng /btc ƒë·ªÉ xem gi√° BTC.")

# L·ªánh /btc
async def btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        res = requests.get("https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT")
        price = float(res.json()['price'])
        await update.message.reply_text(f"üí∞ Gi√° BTC hi·ªán t·∫°i: ${price:,.2f}")
    except Exception as e:
        logger.error(f"L·ªói l·∫•y gi√°: {e}")
        await update.message.reply_text("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° BTC.")

# L·ªánh /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ Bot ƒëang online.")

# Kh·ªüi ch·∫°y
if __name__ == '__main__':
    token = os.environ.get("TELEGRAM_TOKEN")
    if not token:
        raise RuntimeError("‚ö†Ô∏è Thi·∫øu TELEGRAM_TOKEN trong bi·∫øn m√¥i tr∆∞·ªùng!")

    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("btc", btc))
    app.add_handler(CommandHandler("status", status))

    app.run_polling()
